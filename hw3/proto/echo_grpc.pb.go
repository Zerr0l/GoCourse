// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/echo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankAccountManagerClient is the client API for BankAccountManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankAccountManagerClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	ChangeAccountAmount(ctx context.Context, in *ChangeAccountAmountRequest, opts ...grpc.CallOption) (*ChangeAccountAmountResponse, error)
	ChangeAccountName(ctx context.Context, in *ChangeAccountNameRequest, opts ...grpc.CallOption) (*ChangeAccountNameResponse, error)
}

type bankAccountManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBankAccountManagerClient(cc grpc.ClientConnInterface) BankAccountManagerClient {
	return &bankAccountManagerClient{cc}
}

func (c *bankAccountManagerClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.BankAccountManager/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountManagerClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.BankAccountManager/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountManagerClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.BankAccountManager/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountManagerClient) ChangeAccountAmount(ctx context.Context, in *ChangeAccountAmountRequest, opts ...grpc.CallOption) (*ChangeAccountAmountResponse, error) {
	out := new(ChangeAccountAmountResponse)
	err := c.cc.Invoke(ctx, "/proto.BankAccountManager/ChangeAccountAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountManagerClient) ChangeAccountName(ctx context.Context, in *ChangeAccountNameRequest, opts ...grpc.CallOption) (*ChangeAccountNameResponse, error) {
	out := new(ChangeAccountNameResponse)
	err := c.cc.Invoke(ctx, "/proto.BankAccountManager/ChangeAccountName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankAccountManagerServer is the server API for BankAccountManager service.
// All implementations must embed UnimplementedBankAccountManagerServer
// for forward compatibility
type BankAccountManagerServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	ChangeAccountAmount(context.Context, *ChangeAccountAmountRequest) (*ChangeAccountAmountResponse, error)
	ChangeAccountName(context.Context, *ChangeAccountNameRequest) (*ChangeAccountNameResponse, error)
	mustEmbedUnimplementedBankAccountManagerServer()
}

// UnimplementedBankAccountManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBankAccountManagerServer struct {
}

func (UnimplementedBankAccountManagerServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedBankAccountManagerServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedBankAccountManagerServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedBankAccountManagerServer) ChangeAccountAmount(context.Context, *ChangeAccountAmountRequest) (*ChangeAccountAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountAmount not implemented")
}
func (UnimplementedBankAccountManagerServer) ChangeAccountName(context.Context, *ChangeAccountNameRequest) (*ChangeAccountNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountName not implemented")
}
func (UnimplementedBankAccountManagerServer) mustEmbedUnimplementedBankAccountManagerServer() {}

// UnsafeBankAccountManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankAccountManagerServer will
// result in compilation errors.
type UnsafeBankAccountManagerServer interface {
	mustEmbedUnimplementedBankAccountManagerServer()
}

func RegisterBankAccountManagerServer(s grpc.ServiceRegistrar, srv BankAccountManagerServer) {
	s.RegisterService(&BankAccountManager_ServiceDesc, srv)
}

func _BankAccountManager_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountManagerServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BankAccountManager/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountManagerServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountManager_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountManagerServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BankAccountManager/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountManagerServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountManager_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountManagerServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BankAccountManager/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountManagerServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountManager_ChangeAccountAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountManagerServer).ChangeAccountAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BankAccountManager/ChangeAccountAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountManagerServer).ChangeAccountAmount(ctx, req.(*ChangeAccountAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountManager_ChangeAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountManagerServer).ChangeAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BankAccountManager/ChangeAccountName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountManagerServer).ChangeAccountName(ctx, req.(*ChangeAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankAccountManager_ServiceDesc is the grpc.ServiceDesc for BankAccountManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankAccountManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BankAccountManager",
	HandlerType: (*BankAccountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _BankAccountManager_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _BankAccountManager_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _BankAccountManager_GetAccount_Handler,
		},
		{
			MethodName: "ChangeAccountAmount",
			Handler:    _BankAccountManager_ChangeAccountAmount_Handler,
		},
		{
			MethodName: "ChangeAccountName",
			Handler:    _BankAccountManager_ChangeAccountName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/echo.proto",
}
